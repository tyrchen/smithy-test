// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn de_delete_todo_http_request<B>(
    #[allow(unused_variables)] request: ::http::Request<B>,
) -> std::result::Result<
    crate::input::DeleteTodoInput,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection,
>
where
    B: ::aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection:
        From<<B as ::aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::delete_todo_input::Builder::default();
        #[allow(unused_variables)]
        let ::aws_smithy_runtime_api::http::RequestParts {
            uri, headers, body, ..
        } = ::aws_smithy_runtime_api::http::Request::try_from(request)?.into_parts();
        let input_string = uri.path();
        let (input_string, (_, m1)) =
            ::nom::sequence::tuple::<_, _, ::nom::error::Error<&str>, _>((
                ::nom::sequence::preceded(
                    ::nom::bytes::complete::tag("/"),
                    ::nom::bytes::complete::tag::<_, _, ::nom::error::Error<&str>>("todos"),
                ),
                ::nom::sequence::preceded(
                    ::nom::bytes::complete::tag("/"),
                    ::nom::branch::alt::<_, _, ::nom::error::Error<&str>, _>((
                        ::nom::bytes::complete::take_until("/"),
                        ::nom::combinator::rest,
                    )),
                ),
            ))(input_string)?;
        debug_assert_eq!("", input_string);
        input = input.set_id(crate::protocol_serde::shape_delete_todo_input::de_id(m1)?);
        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_delete_todo_http_response(
    #[allow(unused_variables)] output: crate::output::DeleteTodoOutput,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = ::http::Response::builder();
        builder =
            crate::protocol_serde::shape_delete_todo::ser_delete_todo_headers(&output, builder)?;
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::CONTENT_TYPE,
            "application/json",
        );
        let http_status: u16 = 204;
        builder = builder.status(http_status);
        let payload =
            crate::protocol_serde::shape_delete_todo_output::ser_delete_todo_output_output_output(
                &output,
            )?;
        let content_length = payload.len();
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::CONTENT_LENGTH,
            content_length,
        );
        let body = ::aws_smithy_http_server::body::to_boxed(payload);
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_delete_todo_http_error(
    error: &crate::error::DeleteTodoError,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::ResponseRejection,
> {
    Ok({
        match error {
            crate::error::DeleteTodoError::NotFoundError(output) => {
                let payload =
                    crate::protocol_serde::shape_not_found_error::ser_not_found_error_error(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "NotFoundError",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(404)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::DeleteTodoError::ValidationException(output) => {
                let payload = crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ValidationException",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
        }
    })
}

pub fn ser_delete_todo_headers(
    input: &crate::output::DeleteTodoOutput,
    mut builder: ::http::response::Builder,
) -> std::result::Result<::http::response::Builder, ::aws_smithy_types::error::operation::BuildError>
{
    {
        let mut encoder = ::aws_smithy_types::primitive::Encoder::from(input.rows_affected);
        let formatted_1 = encoder.encode();
        if !formatted_1.is_empty() {
            let header_value = formatted_1;
            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                ::aws_smithy_types::error::operation::BuildError::invalid_field(
                    "rows_affected",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Rows-Affected", header_value);
        }
    }
    Ok(builder)
}
