// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<
        ::aws_smithy_runtime_api::client::interceptors::context::Error,
    >,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| {
            ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output)
        })
        .map_err(|error| {
            ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error)
        })
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<
    ::aws_smithy_types::error::metadata::Builder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_todo;

pub(crate) mod shape_delete_todo;

pub(crate) mod shape_echo_message;

pub(crate) mod shape_get_todo;

pub(crate) mod shape_list_todos;

pub(crate) mod shape_signin;

pub(crate) mod shape_update_todo;

pub(crate) mod shape_update_todo_status;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_conflict_error;

pub(crate) mod shape_create_todo_input;

pub(crate) mod shape_create_todo_output;

pub(crate) mod shape_delete_todo_output;

pub(crate) mod shape_forbidden_error;

pub(crate) mod shape_not_found_error;

pub(crate) mod shape_signin_input;

pub(crate) mod shape_throttling_error;

pub(crate) mod shape_unauthorized_error;

pub(crate) mod shape_update_todo_input;

pub(crate) mod shape_update_todo_output;

pub(crate) mod shape_update_todo_status_output;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_todo_item;

pub(crate) mod shape_todo_list;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_validation_exception_field;
