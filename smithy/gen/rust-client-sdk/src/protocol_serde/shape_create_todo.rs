// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_todo_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_todo::CreateTodoOutput,
    crate::operation::create_todo::CreateTodoError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(
        _response_status,
        _response_headers,
        _response_body,
    )
    .map_err(crate::operation::create_todo::CreateTodoError::unhandled)?;
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::create_todo::CreateTodoError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConflictError" => crate::operation::create_todo::CreateTodoError::ConflictError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictErrorBuilder::default();
                output = crate::protocol_serde::shape_conflict_error::de_conflict_error_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_todo::CreateTodoError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::conflict_error_correct_errors(output)
                    .build()
                    .map_err(crate::operation::create_todo::CreateTodoError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::create_todo::CreateTodoError::ValidationError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationErrorBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output).map_err(crate::operation::create_todo::CreateTodoError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::create_todo::CreateTodoError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::create_todo::CreateTodoError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_todo_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_todo::CreateTodoOutput,
    crate::operation::create_todo::CreateTodoError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::create_todo::builders::CreateTodoOutputBuilder::default();
        output = output.set_id(
            crate::protocol_serde::shape_create_todo_output::de_id_header(_response_headers)
                .map_err(|_| {
                    crate::operation::create_todo::CreateTodoError::unhandled(
                        "Failed to parse id from header `X-Todo-Id",
                    )
                })?,
        );
        crate::serde_util::create_todo_output_output_correct_errors(output)
            .build()
            .map_err(crate::operation::create_todo::CreateTodoError::unhandled)?
    })
}

pub fn ser_create_todo_input(
    input: &crate::operation::create_todo::CreateTodoInput,
) -> Result<
    ::aws_smithy_types::body::SdkBody,
    ::aws_smithy_types::error::operation::SerializationError,
> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_todo_input::ser_create_todo_input_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
