// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_todo_status_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_todo_status::UpdateTodoStatusOutput,
    crate::operation::update_todo_status::UpdateTodoStatusError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(
        _response_status,
        _response_headers,
        _response_body,
    )
    .map_err(crate::operation::update_todo_status::UpdateTodoStatusError::unhandled)?;
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::update_todo_status::UpdateTodoStatusError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "NotFoundError" => {
            crate::operation::update_todo_status::UpdateTodoStatusError::NotFoundError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NotFoundErrorBuilder::default();
                    output =
                        crate::protocol_serde::shape_not_found_error::de_not_found_error_json_err(
                            _response_body,
                            output,
                        )
                        .map_err(
                            crate::operation::update_todo_status::UpdateTodoStatusError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    crate::serde_util::not_found_error_correct_errors(output)
                        .build()
                        .map_err(
                            crate::operation::update_todo_status::UpdateTodoStatusError::unhandled,
                        )?
                };
                tmp
            })
        }
        "ValidationException" => {
            crate::operation::update_todo_status::UpdateTodoStatusError::ValidationError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ValidationErrorBuilder::default();
                    output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output).map_err(crate::operation::update_todo_status::UpdateTodoStatusError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::validation_exception_correct_errors(output)
                        .build()
                        .map_err(
                            crate::operation::update_todo_status::UpdateTodoStatusError::unhandled,
                        )?
                };
                tmp
            })
        }
        _ => crate::operation::update_todo_status::UpdateTodoStatusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_todo_status_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_todo_status::UpdateTodoStatusOutput,
    crate::operation::update_todo_status::UpdateTodoStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::update_todo_status::builders::UpdateTodoStatusOutputBuilder::default(
            );
        output = output.set_rows_affected(
            crate::protocol_serde::shape_update_todo_status_output::de_rows_affected_header(
                _response_headers,
            )
            .map_err(|_| {
                crate::operation::update_todo_status::UpdateTodoStatusError::unhandled(
                    "Failed to parse rowsAffected from header `X-Rows-Affected",
                )
            })?,
        );
        crate::serde_util::update_todo_status_output_output_correct_errors(output)
            .build()
            .map_err(crate::operation::update_todo_status::UpdateTodoStatusError::unhandled)?
    })
}

pub fn ser_update_todo_status_headers(
    input: &crate::operation::update_todo_status::UpdateTodoStatusInput,
    mut builder: ::http::request::Builder,
) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError>
{
    if let ::std::option::Option::Some(inner_1) = &input.status {
        let mut encoder = ::aws_smithy_types::primitive::Encoder::from(*inner_1);
        let formatted_2 = encoder.encode();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                ::aws_smithy_types::error::operation::BuildError::invalid_field(
                    "status",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Todo-Status", header_value);
        }
    }
    Ok(builder)
}
