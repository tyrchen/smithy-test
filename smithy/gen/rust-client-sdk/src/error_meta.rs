// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// Conflict error.
    ConflictError(crate::types::error::ConflictError),
    /// Forbidden error.
    ForbiddenError(crate::types::error::ForbiddenError),
    /// Not found error.
    NotFoundError(crate::types::error::NotFoundError),
    /// Throttling error.
    ThrottlingError(crate::types::error::ThrottlingError),
    /// Unauthorized error.
    UnauthorizedError(crate::types::error::UnauthorizedError),
    /// A standard error for input validation failures. This should be thrown by services when a member of the input structure falls outside of the modeled or documented constraints.
    ValidationError(crate::types::error::ValidationError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(
        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error."
    )]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictError(inner) => inner.fmt(f),
            Error::ForbiddenError(inner) => inner.fmt(f),
            Error::NotFoundError(inner) => inner.fmt(f),
            Error::ThrottlingError(inner) => inner.fmt(f),
            Error::UnauthorizedError(inner) => inner.fmt(f),
            Error::ValidationError(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) =
                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
                {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::ConflictError(inner) => inner.meta(),
            Self::ForbiddenError(inner) => inner.meta(),
            Self::NotFoundError(inner) => inner.meta(),
            Self::ThrottlingError(inner) => inner.meta(),
            Self::UnauthorizedError(inner) => inner.meta(),
            Self::ValidationError(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_todo::CreateTodoError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_todo::CreateTodoError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_todo::CreateTodoError> for Error {
    fn from(err: crate::operation::create_todo::CreateTodoError) -> Self {
        match err {
            crate::operation::create_todo::CreateTodoError::ConflictError(inner) => {
                Error::ConflictError(inner)
            }
            crate::operation::create_todo::CreateTodoError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::create_todo::CreateTodoError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_todo::DeleteTodoError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_todo::DeleteTodoError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_todo::DeleteTodoError> for Error {
    fn from(err: crate::operation::delete_todo::DeleteTodoError) -> Self {
        match err {
            crate::operation::delete_todo::DeleteTodoError::NotFoundError(inner) => {
                Error::NotFoundError(inner)
            }
            crate::operation::delete_todo::DeleteTodoError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::delete_todo::DeleteTodoError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::echo_message::EchoMessageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::echo_message::EchoMessageError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::echo_message::EchoMessageError> for Error {
    fn from(err: crate::operation::echo_message::EchoMessageError) -> Self {
        match err {
            crate::operation::echo_message::EchoMessageError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::echo_message::EchoMessageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_todo::GetTodoError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_todo::GetTodoError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_todo::GetTodoError> for Error {
    fn from(err: crate::operation::get_todo::GetTodoError) -> Self {
        match err {
            crate::operation::get_todo::GetTodoError::NotFoundError(inner) => {
                Error::NotFoundError(inner)
            }
            crate::operation::get_todo::GetTodoError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::get_todo::GetTodoError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_todos::ListTodosError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_todos::ListTodosError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_todos::ListTodosError> for Error {
    fn from(err: crate::operation::list_todos::ListTodosError) -> Self {
        match err {
            crate::operation::list_todos::ListTodosError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::list_todos::ListTodosError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::signin::SigninError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::signin::SigninError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::signin::SigninError> for Error {
    fn from(err: crate::operation::signin::SigninError) -> Self {
        match err {
            crate::operation::signin::SigninError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::signin::SigninError::UnauthorizedError(inner) => {
                Error::UnauthorizedError(inner)
            }
            crate::operation::signin::SigninError::ForbiddenError(inner) => {
                Error::ForbiddenError(inner)
            }
            crate::operation::signin::SigninError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::signin::SigninError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_todo::UpdateTodoError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_todo::UpdateTodoError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_todo::UpdateTodoError> for Error {
    fn from(err: crate::operation::update_todo::UpdateTodoError) -> Self {
        match err {
            crate::operation::update_todo::UpdateTodoError::NotFoundError(inner) => {
                Error::NotFoundError(inner)
            }
            crate::operation::update_todo::UpdateTodoError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::update_todo::UpdateTodoError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_todo_status::UpdateTodoStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_todo_status::UpdateTodoStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_todo_status::UpdateTodoStatusError> for Error {
    fn from(err: crate::operation::update_todo_status::UpdateTodoStatusError) -> Self {
        match err {
            crate::operation::update_todo_status::UpdateTodoStatusError::NotFoundError(inner) => {
                Error::NotFoundError(inner)
            }
            crate::operation::update_todo_status::UpdateTodoStatusError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::update_todo_status::UpdateTodoStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ConflictError(inner) => inner.source(),
            Error::ForbiddenError(inner) => inner.source(),
            Error::NotFoundError(inner) => inner.source(),
            Error::ThrottlingError(inner) => inner.source(),
            Error::UnauthorizedError(inner) => inner.source(),
            Error::ValidationError(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
